plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.2'
    id 'com.enonic.xp.app' version '3.4.0'
    id "com.github.node-gradle.node" version '7.0.0'
}

def xpVersion=version

app {
    name = 'com.enonic.xp.app.users'
    group = 'com.enonic.xp'
    displayName = 'Users'
    systemApp = true
    systemVersion = "${version}"
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

compileJava {
    options.release = 11
}

apply from: "$projectDir/gradle/env.gradle"
apply from: "$projectDir/gradle/node.gradle"
apply from: "$projectDir/gradle/lib-admin.gradle"

dependencies {
    implementation "com.enonic.xp:jaxrs-api:${xpVersion}"
    implementation "com.enonic.xp:core-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-node:${xpVersion}"
    include "com.enonic.xp:lib-auth:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    include "com.enonic.lib:lib-graphql:2.1.0"
    include "com.enonic.lib:lib-mustache:2.1.0"
    include 'com.enonic.lib:lib-router:3.1.0'
    include 'com.enonic.lib:lib-static:1.0.3'

    testImplementation "com.enonic.xp:testing:${xpVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter:5.9.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'
    testImplementation( testFixtures( "com.enonic.xp:jaxrs-impl:${xpVersion}" ) )
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check:types'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}
check.dependsOn npmCheck

tasks.withType(Copy) {
  includeEmptyDirs = false
}

// task bunInstall( type: NpxTask ) {
//   // Running this should not create a package-lock.json file
//   command  = 'bun'
//   args = ['install']
// }

tasks.register('lint', NpmTask) {
    dependsOn ( 'npmInstall' )
    group "verification"
    args = ['run', 'lint']
    outputs.upToDateWhen { false }
}
check.dependsOn lint

tasks.register('npmBuild', NpmTask) {
    dependsOn( 'npmInstall' )
    environment = [
        'FORCE_COLOR': 'true',
        'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
        'NODE_ENV': nodeEnvironment()
    ]
    description = 'Build UI resources (ts, css, etc).'
    args = ['run', '--silent', 'build']
    inputs.dir '.xp/dev'
    inputs.dir 'src/main/resources'
    outputs.dir "$buildDir/build/resources/main"
    inputs.file 'tsup.config.ts'
}

tasks.register('npmBuildTests', NpmTask) {
    dependsOn( 'npmBuild' )
    environment = [
        'FORCE_COLOR': 'true',
        'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
        'NODE_ENV': nodeEnvironment()
    ]
    description = 'Build tests'
    args = ['run', '--silent', 'build:tests']
    inputs.dir 'src/test/resources'
    outputs.dir "$buildDir/build/resources/test"
    inputs.file 'tsup.config.ts'
}
test.dependsOn npmBuildTests

processResources {
    exclude '**/*.ts'
    exclude 'assets/**/*.less' // lessc and postcss will handle this
    exclude 'assets/**/*.woff' // postcss-url will copy
    exclude 'assets/**/*.woff2' // postcss-url will copy

    if ( isProd() )
    {
        exclude 'assets/**/*.map'
    }
}

processTestResources {
    exclude '**/*.ts'
}

jar {
    outputs.dir "$buildDir/resources/main"
    dependsOn( 'npmBuild', 'javadoc', 'test' )
}

test {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-noverify', '-XX:TieredStopAtLevel=1'
}
