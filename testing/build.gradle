import com.enonic.uitest.server.ServerInstance
import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.enonic.xp.base'
    id 'com.github.node-gradle.node' version '7.0.2'
}
group = 'com.enonic.xp.js_testing'

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

configurations {
    distro
}

enonic {
    publishRepo = 'inhouse'
}

ext {
    unpackDir = "$buildDir/install" as GStringImpl
    distroDir = "$unpackDir/enonic-xp-generic-$version" as GStringImpl
    deployDir = "$distroDir/home/deploy" as GStringImpl
    testDataDir = "$projectDir/test-data/common-config" as GStringImpl
    resDir = "$projectDir/test-data" as GStringImpl
    appDir = "$projectDir/test-data/test-applications" as GStringImpl
    xpHome = "$distroDir/home" as GStringImpl
    configDir = "$xpHome/config" as GStringImpl
    xpServer = new ServerInstance()
    appName = "app-users"
    appFile = "$distroDir/system/40/${appName}-${version}.jar" as GStringImpl
    appUrl = project.hasProperty('appUrl') ? appUrl : "file:///$projectDir/../build/libs/${appName}.jar" as GStringImpl
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$version@zip"
}

tasks.register( 'unpackDistro', Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

tasks.register( 'copyConfig', Copy ) {
    println testDataDir
    from testDataDir
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

tasks.register( 'copyApps', Copy ) {
    println appDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter unpackDistro
}

tasks.register( 'deployApp', DefaultTask ) {
    outputs.files( appFile )
    outputs.upToDateWhen { false }
    doLast {
        def f = new File(appFile as String)
        println "Deleting  ${appFile}. Exists ${f.exists()}"

        f.delete()

        println "Copying from ${appUrl} to ${appFile}"
        new URL(appUrl as String).withInputStream { i -> f.withOutputStream { it << i } }
    }
    mustRunAfter unpackDistro
}

tasks.register( 'startServer', ) {
    dependsOn ( unpackDistro )
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
}

tasks.register( 'stopServer' ) {
    doLast {
        xpServer.stop()
    }
}

tasks.register( 'cleanup', Delete ) {
    delete './build/reports/allure'
}

tasks.register( 'generateReportAndStopServer', NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}

// wdio_chrome is a script defined in package.json
tasks.register( 'w_testUsersApp', NpmTask ) {
    dependsOn ( npmInstall, unpackDistro, copyConfig, copyApps, deployApp, startServer )
    args = ['run-script', 'test_users:wdio_chrome']
    finalizedBy generateReportAndStopServer
}

tasks.register( 'w_testUsersAppLocal', NpmTask ) {
    dependsOn ( npmInstall )
    args = ['run-script', 'test_users:wdio_chrome']
}


