import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults'
    id 'com.enonic.xp.base'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.xp.js_testing'

repositories {
    mavenCentral()
    xp.enonicRepo('dev')
}

configurations {
    distro
}

enonic {
    publishRepo = 'inhouse'
}

ext {
    unpackDir = "$buildDir/install"
    distroDir = "$unpackDir/enonic-xp-generic-$version"
    deployDir = "$distroDir/home/deploy"
    mochaResultsDir = "$buildDir/mochawesome-report"
    testDataDir = "$projectDir/test-data/common-config"
    resDir = "$projectDir${File.separator}test-data"
    appDir = "$projectDir/test-data/test-applications"
    xpHome = "$distroDir/home"
    configDir = "$xpHome/config"
    xpServer = new ServerInstance()
    appFile = "$distroDir/system/40/app-users-${version}.jar"
    appUrl = project.hasProperty('appUrl') ? appUrl : "file:///$projectDir/../build/libs/app-users.jar"
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$version@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task copyConfig( type: Copy ) {
    println testDataDir
    from testDataDir
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

task copyApps( type: Copy ) {
    println '*********************************************************'
    println '* task started:copyApps  *'
    println '*********************************************************'
    println appDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter 'startServer'
}

task deployApp( type: DefaultTask ) {
    outputs.files( appFile )
    doLast {
        def f = new File( appFile )
        f.delete(  )
        new URL( appUrl ).withInputStream { i -> f.withOutputStream { it << i } }
    }
    mustRunAfter unpackDistro
}

task zipReport( type: Zip ) {
    from mochaResultsDir
    include '*'
    include '*/*'
    classifier 'mochaReport'
}

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifact zipReport
        }
    }
}

task startServer( dependsOn: [unpackDistro, copyConfig, deployApp] ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
    mustRunAfter npmInstall
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

task testUsersApp( type: NpmTask, dependsOn: [npmInstall, startServer, copyApps] ) {
    args = ['test']
    finalizedBy stopServer
}

task testUsersAppAppLocally( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['test']
}

